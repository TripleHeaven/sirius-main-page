webpackHotUpdate_N_E("pages/index",{

/***/ "./components/Graph.tsx":
/*!******************************!*\
  !*** ./components/Graph.tsx ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Graph; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-chartjs-2 */ \"./node_modules/react-chartjs-2/es/index.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _jsxFileName = \"/home/ilya/workReact/currentcurrentProject/components/Graph.tsx\",\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n // import styled from \"@emotion/styled/macro\";\n\nfunction Graph() {\n  _s();\n\n  // styles\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])({}),\n      chartData = _useState[0],\n      setChartData = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      currentIncome = _useState2[0],\n      setIncome = _useState2[1];\n\n  var chart = function chart() {\n    var getRandomInt = function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    };\n\n    var generateRandomData = function generateRandomData() {\n      var toReturn = [];\n      var incomeSum = 0;\n\n      for (var i = 0; i < 7; i++) {\n        toReturn.push(getRandomInt(1000, 6000));\n        incomeSum += toReturn[i];\n      }\n\n      setIncome(incomeSum);\n      return toReturn;\n    };\n\n    setChartData({\n      labels: [\"23 сен\", \"24 сен\", \"25 сен\", \"26 сен\", \"27 сен\", \"28 сен\", \"29 сен\"],\n      datasets: [{\n        label: \"Income\",\n        data: generateRandomData(),\n        borderColor: \"rgba(46,113,243,1)\",\n        backgroundColor: \"rgba(46,113,243,0.1)\",\n        borderWidth: 2,\n        pointStyle: \"circle\",\n        fill: true,\n        pointBackgroundColor: \"white\",\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverBorderColor: \"#ED0F48\",\n        hoverBackgroundColor: \"#FFFFFF\"\n      }]\n    });\n  };\n\n  var GraphContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w10\",\n    label: \"GraphContainer\"\n  })(false ? undefined : {\n    name: \"bth19s\",\n    styles: \"height:200px;width:560px;background:#fff;z-index:0\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Container = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w9\",\n    label: \"Container\"\n  })(false ? undefined : {\n    name: \"qxogif\",\n    styles: \"display:flex;flex-direction:column;width:575px;height:315px;background:black;font-family:\\\"Jost\\\"\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var HidingBlock = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w8\",\n    label: \"HidingBlock\"\n  })(false ? undefined : {\n    name: \"1rcaon6\",\n    styles: \"width:565px;height:225px;background:#fff;margin-top:-300px;z-index:100\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var MainBlock = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w7\",\n    label: \"MainBlock\"\n  })(false ? undefined : {\n    name: \"yrf9ut\",\n    styles: \"width:600px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var InfoContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w6\",\n    label: \"InfoContainer\"\n  })(false ? undefined : {\n    name: \"s2yna3\",\n    styles: \"width:100%;display:grid;grid-template-columns:1fr 1fr;grid-template-rows:auto auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var BankPic = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\", {\n    target: \"e11i6h3w5\",\n    label: \"BankPic\"\n  })(false ? undefined : {\n    name: \"1tuws20\",\n    styles: \"grid-column-start:2;grid-column-end:3;gird-row-start:1;grid-row-end:3;display:flex;margin-left:auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeLabel = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w4\",\n    label: \"IncomeLabel\"\n  })(false ? undefined : {\n    name: \"efc9ww\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:1;grid-row-end:2\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeSize = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w3\",\n    label: \"IncomeSize\"\n  })(false ? undefined : {\n    name: \"17pl6a5\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:2;grid-row-end:3;display:flex\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeNumber = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w2\",\n    label: \"IncomeNumber\"\n  })(false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\n  var Rub = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w1\",\n    label: \"Rub\"\n  })(false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\n  var LittlePic = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\", {\n    target: \"e11i6h3w0\",\n    label: \"LittlePic\"\n  })(false ? undefined : {\n    name: \"rhxkjj\",\n    styles: \"height:20px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    chart();\n  }, []);\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(Container, {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(InfoContainer, {\n      children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(IncomeLabel, {\n        children: \"\\u0412\\u044B\\u0440\\u0443\\u0447\\u043A\\u0430:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(IncomeSize, {\n        children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(IncomeNumber, {\n          children: currentIncome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(Rub, {\n          children: \"\\u0440\\u0443\\u0431\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(LittlePic, {\n          src: \"/lilIncrease.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(BankPic, {\n        src: \"/yaLogo.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(GraphContainer, {\n      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__[\"Line\"], {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            callbacks: {\n              title: function title(tooltipItem, data) {\n                return \"Выручка за \" + data[\"labels\"][tooltipItem[0][\"index\"]] + \":\";\n              },\n              label: function label(tooltipItem, data) {\n                return data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]] + \" руб\";\n              }\n            },\n            backgroundColor: \"#FFF\",\n            titleFontFamily: \"Jost\",\n            titleFontSize: 10,\n            titleFontStyle: \"normal\",\n            titleFontColor: \"rgba(0,0,0,0.4)\",\n            titleFontWidth: 100,\n            bodyFontColor: \"#000\",\n            bodyFontSize: 12,\n            bodyFontFamily: \"Jost\",\n            displayColors: false,\n            xPadding: 13,\n            yPadding: 13,\n            cornerRadius: 0\n          },\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: true,\n                drawBorder: false,\n                fontSize: 12,\n                padding: 10,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: false,\n                drawBorder: false\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true,\n                padding: 10,\n                fontSize: 12,\n                callback: function callback(value, index, values) {\n                  if (value > 5000) {\n                    return \"\";\n                  } else {\n                    return value / 1000 + \" тыс. ₽\";\n                  }\n                },\n                maxTicksLimit: 10,\n                stepSize: 1000,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: true,\n                drawBorder: false,\n                z: -100\n              }\n            }]\n          }\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graph, \"CrqXhFVR8pscb/XfSvZOt4MUOF4=\");\n\n_c = Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Graph.tsx\n");

/***/ })

})