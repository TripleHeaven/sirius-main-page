webpackHotUpdate_N_E("pages/index",{

/***/ "./components/Graph.tsx":
/*!******************************!*\
  !*** ./components/Graph.tsx ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return LeftMenu; });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-chartjs-2 */ \"./node_modules/react-chartjs-2/es/index.js\");\n/* harmony import */ var react_chartjs_2__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _jsxFileName = \"/home/ilya/workReact/currentcurrentProject/components/Graph.tsx\",\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n // import styled from \"@emotion/styled/macro\";\n\nfunction LeftMenu() {\n  _s();\n\n  // styles\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])({}),\n      chartData = _useState[0],\n      setChartData = _useState[1];\n\n  var chart = function chart() {\n    var getRandomInt = function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    };\n\n    var generateRandomData = function generateRandomData() {\n      var toReturn = [];\n\n      for (var i = 0; i < 7; i++) {\n        toReturn.push(getRandomInt(1000, 6000));\n      }\n\n      return toReturn;\n    };\n\n    setChartData({\n      labels: [\"23 сен\", \"24 сен\", \"25 сен\", \"26 сен\", \"27 сен\", \"28 сен\", \"29 сен\"],\n      datasets: [{\n        label: \"Income\",\n        data: generateRandomData(),\n        borderColor: \"rgba(46,113,243,1)\",\n        backgroundColor: \"rgba(46,113,243,0.1)\",\n        borderWidth: 2,\n        pointStyle: \"circle\",\n        fill: true,\n        pointBackgroundColor: \"white\",\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverBorderColor: \"#ED0F48\",\n        hoverBackgroundColor: \"#FFFFFF\"\n      }]\n    });\n  };\n\n  var GraphContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w4\",\n    label: \"GraphContainer\"\n  })(false ? undefined : {\n    name: \"bth19s\",\n    styles: \"height:200px;width:560px;background:#fff;z-index:0\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtRG1DIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0TWVudSgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgY29uc3QgY2hhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7IC8vVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgICB9O1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZG9tRGF0YSA9ICgpID0+IHtcbiAgICAgIGxldCB0b1JldHVybiA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG4gICAgc2V0Q2hhcnREYXRhKHtcbiAgICAgIGxhYmVsczogW1xuICAgICAgICBcIjIzINGB0LXQvVwiLFxuICAgICAgICBcIjI0INGB0LXQvVwiLFxuICAgICAgICBcIjI1INGB0LXQvVwiLFxuICAgICAgICBcIjI2INGB0LXQvVwiLFxuICAgICAgICBcIjI3INGB0LXQvVwiLFxuICAgICAgICBcIjI4INGB0LXQvVwiLFxuICAgICAgICBcIjI5INGB0LXQvVwiLFxuICAgICAgXSxcbiAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJJbmNvbWVcIixcbiAgICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoKSxcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDQ2LDExMywyNDMsMSlcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDAuMSlcIixcbiAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICBwb2ludEJvcmRlcldpZHRoOiAyLFxuICAgICAgICAgIHBvaW50UmFkaXVzOiA0LFxuICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogXCIjRUQwRjQ4XCIsXG4gICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgR3JhcGhDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDU2MHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgei1pbmRleDogMDtcbiAgYDtcbiAgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIGA7XG4gIGNvbnN0IEhpZGluZ0Jsb2NrID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNTY1cHg7XG4gICAgaGVpZ2h0OiAyMjVweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIG1hcmdpbi10b3A6IC0zMDBweDtcbiAgICB6LWluZGV4OiAxMDA7XG4gIGA7XG4gIGNvbnN0IE1haW5CbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwMHB4O1xuICBgO1xuICBjb25zdCBJbmZvQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgYDtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGFydCgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxJbmZvQ29udGFpbmVyPjwvSW5mb0NvbnRhaW5lcj5cbiAgICAgIDxHcmFwaENvbnRhaW5lcj5cbiAgICAgICAgPExpbmVcbiAgICAgICAgICBkYXRhPXtjaGFydERhdGF9XG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCLQktGL0YDRg9GH0LrQsCDQt9CwIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImxhYmVsc1wiXVt0b29sdGlwSXRlbVswXVtcImluZGV4XCJdXSArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImRhdGFzZXRzXCJdWzBdW1wiZGF0YVwiXVt0b29sdGlwSXRlbVtcImluZGV4XCJdXSArIFwiINGA0YPQsVwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZGXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwicmdiYSgwLDAsMCwwLjQpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICAgICAgICBib2R5Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICBib2R5Rm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB4UGFkZGluZzogMTMsXG4gICAgICAgICAgICAgIHlQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9LFxuICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiSm9zdFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyAxMDAwICsgXCIg0YLRi9GBLiDigr1cIjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6OiAtMTAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICA8L0xpbmU+XG4gICAgICA8L0dyYXBoQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Container = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w3\",\n    label: \"Container\"\n  })(false ? undefined : {\n    name: \"nmethy\",\n    styles: \"display:flex;width:575px;height:315px;background:#fff\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RDhCIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0TWVudSgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgY29uc3QgY2hhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7IC8vVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgICB9O1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZG9tRGF0YSA9ICgpID0+IHtcbiAgICAgIGxldCB0b1JldHVybiA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG4gICAgc2V0Q2hhcnREYXRhKHtcbiAgICAgIGxhYmVsczogW1xuICAgICAgICBcIjIzINGB0LXQvVwiLFxuICAgICAgICBcIjI0INGB0LXQvVwiLFxuICAgICAgICBcIjI1INGB0LXQvVwiLFxuICAgICAgICBcIjI2INGB0LXQvVwiLFxuICAgICAgICBcIjI3INGB0LXQvVwiLFxuICAgICAgICBcIjI4INGB0LXQvVwiLFxuICAgICAgICBcIjI5INGB0LXQvVwiLFxuICAgICAgXSxcbiAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJJbmNvbWVcIixcbiAgICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoKSxcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDQ2LDExMywyNDMsMSlcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDAuMSlcIixcbiAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICBwb2ludEJvcmRlcldpZHRoOiAyLFxuICAgICAgICAgIHBvaW50UmFkaXVzOiA0LFxuICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogXCIjRUQwRjQ4XCIsXG4gICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgR3JhcGhDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDU2MHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgei1pbmRleDogMDtcbiAgYDtcbiAgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIGA7XG4gIGNvbnN0IEhpZGluZ0Jsb2NrID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNTY1cHg7XG4gICAgaGVpZ2h0OiAyMjVweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIG1hcmdpbi10b3A6IC0zMDBweDtcbiAgICB6LWluZGV4OiAxMDA7XG4gIGA7XG4gIGNvbnN0IE1haW5CbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwMHB4O1xuICBgO1xuICBjb25zdCBJbmZvQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgYDtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGFydCgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxJbmZvQ29udGFpbmVyPjwvSW5mb0NvbnRhaW5lcj5cbiAgICAgIDxHcmFwaENvbnRhaW5lcj5cbiAgICAgICAgPExpbmVcbiAgICAgICAgICBkYXRhPXtjaGFydERhdGF9XG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCLQktGL0YDRg9GH0LrQsCDQt9CwIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImxhYmVsc1wiXVt0b29sdGlwSXRlbVswXVtcImluZGV4XCJdXSArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImRhdGFzZXRzXCJdWzBdW1wiZGF0YVwiXVt0b29sdGlwSXRlbVtcImluZGV4XCJdXSArIFwiINGA0YPQsVwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZGXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwicmdiYSgwLDAsMCwwLjQpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICAgICAgICBib2R5Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICBib2R5Rm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB4UGFkZGluZzogMTMsXG4gICAgICAgICAgICAgIHlQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9LFxuICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiSm9zdFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyAxMDAwICsgXCIg0YLRi9GBLiDigr1cIjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6OiAtMTAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICA8L0xpbmU+XG4gICAgICA8L0dyYXBoQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var HidingBlock = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w2\",\n    label: \"HidingBlock\"\n  })(false ? undefined : {\n    name: \"1rcaon6\",\n    styles: \"width:565px;height:225px;background:#fff;margin-top:-300px;z-index:100\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErRGdDIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0TWVudSgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgY29uc3QgY2hhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7IC8vVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgICB9O1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZG9tRGF0YSA9ICgpID0+IHtcbiAgICAgIGxldCB0b1JldHVybiA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG4gICAgc2V0Q2hhcnREYXRhKHtcbiAgICAgIGxhYmVsczogW1xuICAgICAgICBcIjIzINGB0LXQvVwiLFxuICAgICAgICBcIjI0INGB0LXQvVwiLFxuICAgICAgICBcIjI1INGB0LXQvVwiLFxuICAgICAgICBcIjI2INGB0LXQvVwiLFxuICAgICAgICBcIjI3INGB0LXQvVwiLFxuICAgICAgICBcIjI4INGB0LXQvVwiLFxuICAgICAgICBcIjI5INGB0LXQvVwiLFxuICAgICAgXSxcbiAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJJbmNvbWVcIixcbiAgICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoKSxcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDQ2LDExMywyNDMsMSlcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDAuMSlcIixcbiAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICBwb2ludEJvcmRlcldpZHRoOiAyLFxuICAgICAgICAgIHBvaW50UmFkaXVzOiA0LFxuICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogXCIjRUQwRjQ4XCIsXG4gICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgR3JhcGhDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDU2MHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgei1pbmRleDogMDtcbiAgYDtcbiAgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIGA7XG4gIGNvbnN0IEhpZGluZ0Jsb2NrID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNTY1cHg7XG4gICAgaGVpZ2h0OiAyMjVweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIG1hcmdpbi10b3A6IC0zMDBweDtcbiAgICB6LWluZGV4OiAxMDA7XG4gIGA7XG4gIGNvbnN0IE1haW5CbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwMHB4O1xuICBgO1xuICBjb25zdCBJbmZvQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgYDtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGFydCgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxJbmZvQ29udGFpbmVyPjwvSW5mb0NvbnRhaW5lcj5cbiAgICAgIDxHcmFwaENvbnRhaW5lcj5cbiAgICAgICAgPExpbmVcbiAgICAgICAgICBkYXRhPXtjaGFydERhdGF9XG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCLQktGL0YDRg9GH0LrQsCDQt9CwIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImxhYmVsc1wiXVt0b29sdGlwSXRlbVswXVtcImluZGV4XCJdXSArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImRhdGFzZXRzXCJdWzBdW1wiZGF0YVwiXVt0b29sdGlwSXRlbVtcImluZGV4XCJdXSArIFwiINGA0YPQsVwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZGXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwicmdiYSgwLDAsMCwwLjQpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICAgICAgICBib2R5Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICBib2R5Rm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB4UGFkZGluZzogMTMsXG4gICAgICAgICAgICAgIHlQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9LFxuICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiSm9zdFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyAxMDAwICsgXCIg0YLRi9GBLiDigr1cIjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6OiAtMTAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICA8L0xpbmU+XG4gICAgICA8L0dyYXBoQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var MainBlock = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w1\",\n    label: \"MainBlock\"\n  })(false ? undefined : {\n    name: \"yrf9ut\",\n    styles: \"width:600px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRThCIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0TWVudSgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgY29uc3QgY2hhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7IC8vVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgICB9O1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZG9tRGF0YSA9ICgpID0+IHtcbiAgICAgIGxldCB0b1JldHVybiA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG4gICAgc2V0Q2hhcnREYXRhKHtcbiAgICAgIGxhYmVsczogW1xuICAgICAgICBcIjIzINGB0LXQvVwiLFxuICAgICAgICBcIjI0INGB0LXQvVwiLFxuICAgICAgICBcIjI1INGB0LXQvVwiLFxuICAgICAgICBcIjI2INGB0LXQvVwiLFxuICAgICAgICBcIjI3INGB0LXQvVwiLFxuICAgICAgICBcIjI4INGB0LXQvVwiLFxuICAgICAgICBcIjI5INGB0LXQvVwiLFxuICAgICAgXSxcbiAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJJbmNvbWVcIixcbiAgICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoKSxcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDQ2LDExMywyNDMsMSlcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDAuMSlcIixcbiAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICBwb2ludEJvcmRlcldpZHRoOiAyLFxuICAgICAgICAgIHBvaW50UmFkaXVzOiA0LFxuICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogXCIjRUQwRjQ4XCIsXG4gICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgR3JhcGhDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDU2MHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgei1pbmRleDogMDtcbiAgYDtcbiAgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIGA7XG4gIGNvbnN0IEhpZGluZ0Jsb2NrID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNTY1cHg7XG4gICAgaGVpZ2h0OiAyMjVweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIG1hcmdpbi10b3A6IC0zMDBweDtcbiAgICB6LWluZGV4OiAxMDA7XG4gIGA7XG4gIGNvbnN0IE1haW5CbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwMHB4O1xuICBgO1xuICBjb25zdCBJbmZvQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgYDtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGFydCgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxJbmZvQ29udGFpbmVyPjwvSW5mb0NvbnRhaW5lcj5cbiAgICAgIDxHcmFwaENvbnRhaW5lcj5cbiAgICAgICAgPExpbmVcbiAgICAgICAgICBkYXRhPXtjaGFydERhdGF9XG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCLQktGL0YDRg9GH0LrQsCDQt9CwIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImxhYmVsc1wiXVt0b29sdGlwSXRlbVswXVtcImluZGV4XCJdXSArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImRhdGFzZXRzXCJdWzBdW1wiZGF0YVwiXVt0b29sdGlwSXRlbVtcImluZGV4XCJdXSArIFwiINGA0YPQsVwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZGXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwicmdiYSgwLDAsMCwwLjQpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICAgICAgICBib2R5Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICBib2R5Rm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB4UGFkZGluZzogMTMsXG4gICAgICAgICAgICAgIHlQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9LFxuICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiSm9zdFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyAxMDAwICsgXCIg0YLRi9GBLiDigr1cIjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6OiAtMTAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICA8L0xpbmU+XG4gICAgICA8L0dyYXBoQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var InfoContainer = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\", {\n    target: \"e11i6h3w0\",\n    label: \"InfoContainer\"\n  })(false ? undefined : {\n    name: \"15ny31w\",\n    styles: \"display:grid;grid-template-columns:1fr 1fr;grid-template-rows:auto auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF5RWtDIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMZWZ0TWVudSgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG5cbiAgY29uc3QgY2hhcnQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1pbiwgbWF4KSA9PiB7XG4gICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTtcbiAgICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7IC8vVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgICB9O1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZG9tRGF0YSA9ICgpID0+IHtcbiAgICAgIGxldCB0b1JldHVybiA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvUmV0dXJuO1xuICAgIH07XG4gICAgc2V0Q2hhcnREYXRhKHtcbiAgICAgIGxhYmVsczogW1xuICAgICAgICBcIjIzINGB0LXQvVwiLFxuICAgICAgICBcIjI0INGB0LXQvVwiLFxuICAgICAgICBcIjI1INGB0LXQvVwiLFxuICAgICAgICBcIjI2INGB0LXQvVwiLFxuICAgICAgICBcIjI3INGB0LXQvVwiLFxuICAgICAgICBcIjI4INGB0LXQvVwiLFxuICAgICAgICBcIjI5INGB0LXQvVwiLFxuICAgICAgXSxcbiAgICAgIGRhdGFzZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogXCJJbmNvbWVcIixcbiAgICAgICAgICBkYXRhOiBnZW5lcmF0ZVJhbmRvbURhdGEoKSxcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJyZ2JhKDQ2LDExMywyNDMsMSlcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDAuMSlcIixcbiAgICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFN0eWxlOiBcImNpcmNsZVwiLFxuICAgICAgICAgIGZpbGw6IHRydWUsXG4gICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgICBwb2ludEJvcmRlcldpZHRoOiAyLFxuICAgICAgICAgIHBvaW50UmFkaXVzOiA0LFxuICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogXCIjRUQwRjQ4XCIsXG4gICAgICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6IFwiI0ZGRkZGRlwiLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgR3JhcGhDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAgIGhlaWdodDogMjAwcHg7XG4gICAgd2lkdGg6IDU2MHB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgei1pbmRleDogMDtcbiAgYDtcbiAgY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gIGA7XG4gIGNvbnN0IEhpZGluZ0Jsb2NrID0gc3R5bGVkLmRpdmBcbiAgICB3aWR0aDogNTY1cHg7XG4gICAgaGVpZ2h0OiAyMjVweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIG1hcmdpbi10b3A6IC0zMDBweDtcbiAgICB6LWluZGV4OiAxMDA7XG4gIGA7XG4gIGNvbnN0IE1haW5CbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDYwMHB4O1xuICBgO1xuICBjb25zdCBJbmZvQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0bztcbiAgYDtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjaGFydCgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lcj5cbiAgICAgIDxJbmZvQ29udGFpbmVyPjwvSW5mb0NvbnRhaW5lcj5cbiAgICAgIDxHcmFwaENvbnRhaW5lcj5cbiAgICAgICAgPExpbmVcbiAgICAgICAgICBkYXRhPXtjaGFydERhdGF9XG4gICAgICAgICAgb3B0aW9ucz17e1xuICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1haW50YWluQXNwZWN0UmF0aW86IGZhbHNlLFxuICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgXCLQktGL0YDRg9GH0LrQsCDQt9CwIFwiICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImxhYmVsc1wiXVt0b29sdGlwSXRlbVswXVtcImluZGV4XCJdXSArXG4gICAgICAgICAgICAgICAgICAgIFwiOlwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IGZ1bmN0aW9uICh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtcImRhdGFzZXRzXCJdWzBdW1wiZGF0YVwiXVt0b29sdGlwSXRlbVtcImluZGV4XCJdXSArIFwiINGA0YPQsVwiXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRkZGXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFNpemU6IDEwLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6IFwicmdiYSgwLDAsMCwwLjQpXCIsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFdpZHRoOiAxMDAsXG4gICAgICAgICAgICAgIGJvZHlGb250Q29sb3I6IFwiIzAwMFwiLFxuICAgICAgICAgICAgICBib2R5Rm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICBib2R5Rm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICB4UGFkZGluZzogMTMsXG4gICAgICAgICAgICAgIHlQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgY29ybmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9LFxuICAgICAgICAgICAgc2NhbGVzOiB7XG4gICAgICAgICAgICAgIHhBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IFwiSm9zdFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHlBeGVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIHZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDUwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgLyAxMDAwICsgXCIg0YLRi9GBLiDigr1cIjtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZTogMTAwMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6OiAtMTAwLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAge1wiIFwifVxuICAgICAgICA8L0xpbmU+XG4gICAgICA8L0dyYXBoQ29udGFpbmVyPlxuICAgIDwvQ29udGFpbmVyPlxuICApO1xufVxuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    chart();\n  }, []);\n  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(Container, {\n    children: [/*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(InfoContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(GraphContainer, {\n      children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxDEV\"])(react_chartjs_2__WEBPACK_IMPORTED_MODULE_3__[\"Line\"], {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            callbacks: {\n              title: function title(tooltipItem, data) {\n                return \"Выручка за \" + data[\"labels\"][tooltipItem[0][\"index\"]] + \":\";\n              },\n              label: function label(tooltipItem, data) {\n                return data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]] + \" руб\";\n              }\n            },\n            backgroundColor: \"#FFF\",\n            titleFontFamily: \"Jost\",\n            titleFontSize: 10,\n            titleFontStyle: \"normal\",\n            titleFontColor: \"rgba(0,0,0,0.4)\",\n            titleFontWidth: 100,\n            bodyFontColor: \"#000\",\n            bodyFontSize: 12,\n            bodyFontFamily: \"Jost\",\n            displayColors: false,\n            xPadding: 13,\n            yPadding: 13,\n            cornerRadius: 0\n          },\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: true,\n                drawBorder: false,\n                fontSize: 12,\n                padding: 10,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: false,\n                drawBorder: false\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true,\n                padding: 10,\n                fontSize: 12,\n                callback: function callback(value, index, values) {\n                  if (value > 5000) {\n                    return \"\";\n                  } else {\n                    return value / 1000 + \" тыс. ₽\";\n                  }\n                },\n                maxTicksLimit: 10,\n                stepSize: 1000,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: true,\n                drawBorder: false,\n                z: -100\n              }\n            }]\n          }\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LeftMenu, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n\n_c = LeftMenu;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeftMenu\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Graph.tsx\n");

/***/ })

})