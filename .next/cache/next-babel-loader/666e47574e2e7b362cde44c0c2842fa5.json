{"ast":null,"code":"import _styled from \"@emotion/styled/base\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/ilya/workReact/currentcurrentProject/components/Graph.tsx\",\n    _s = $RefreshSig$();\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\"; // import styled from \"@emotion/styled/macro\";\n\nexport default function Graph() {\n  _s();\n\n  // styles\n  var _useState = useState({}),\n      chartData = _useState[0],\n      setChartData = _useState[1];\n\n  var _useState2 = useState(0),\n      currentIncome = _useState2[0],\n      setIncome = _useState2[1];\n\n  var chart = function chart() {\n    var getRandomInt = function getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    };\n\n    var generateRandomData = function generateRandomData() {\n      var toReturn = [];\n      var incomeSum = 0;\n\n      for (var i = 0; i < 7; i++) {\n        toReturn.push(getRandomInt(1000, 6000));\n        incomeSum += toReturn[i];\n      }\n\n      setIncome(incomeSum);\n      return toReturn;\n    };\n\n    setChartData({\n      labels: [\"23 сен\", \"24 сен\", \"25 сен\", \"26 сен\", \"27 сен\", \"28 сен\", \"29 сен\"],\n      datasets: [{\n        label: \"Income\",\n        data: generateRandomData(),\n        borderColor: \"rgba(46,113,243,1)\",\n        backgroundColor: \"rgba(46,113,243,0.1)\",\n        borderWidth: 2,\n        pointStyle: \"circle\",\n        fill: true,\n        pointBackgroundColor: \"white\",\n        pointBorderWidth: 2,\n        pointRadius: 4,\n        pointHoverBorderColor: \"#ED0F48\",\n        hoverBackgroundColor: \"#FFFFFF\"\n      }]\n    });\n  };\n\n  var GraphContainer = _styled(\"div\", {\n    target: \"e11i6h3w10\",\n    label: \"GraphContainer\"\n  })(false ? {\n    name: \"bth19s\",\n    styles: \"height:200px;width:560px;background:#fff;z-index:0\"\n  } : {\n    name: \"bth19s\",\n    styles: \"height:200px;width:560px;background:#fff;z-index:0\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Container = _styled(\"div\", {\n    target: \"e11i6h3w9\",\n    label: \"Container\"\n  })(false ? {\n    name: \"1c0eyrh\",\n    styles: \"display:flex;flex-direction:column;width:575px;height:315px;background:#fff;font-family:\\\"Jost\\\"\"\n  } : {\n    name: \"1c0eyrh\",\n    styles: \"display:flex;flex-direction:column;width:575px;height:315px;background:#fff;font-family:\\\"Jost\\\"\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var HidingBlock = _styled(\"div\", {\n    target: \"e11i6h3w8\",\n    label: \"HidingBlock\"\n  })(false ? {\n    name: \"1rcaon6\",\n    styles: \"width:565px;height:225px;background:#fff;margin-top:-300px;z-index:100\"\n  } : {\n    name: \"1rcaon6\",\n    styles: \"width:565px;height:225px;background:#fff;margin-top:-300px;z-index:100\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var MainBlock = _styled(\"div\", {\n    target: \"e11i6h3w7\",\n    label: \"MainBlock\"\n  })(false ? {\n    name: \"yrf9ut\",\n    styles: \"width:600px\"\n  } : {\n    name: \"yrf9ut\",\n    styles: \"width:600px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var InfoContainer = _styled(\"div\", {\n    target: \"e11i6h3w6\",\n    label: \"InfoContainer\"\n  })(false ? {\n    name: \"caluc2\",\n    styles: \"display:grid;padding-left:20px;padding-top:20px;grid-template-columns:auto auto;grid-template-rows:auto auto\"\n  } : {\n    name: \"caluc2\",\n    styles: \"display:grid;padding-left:20px;padding-top:20px;grid-template-columns:auto auto;grid-template-rows:auto auto\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var BankPic = _styled(\"img\", {\n    target: \"e11i6h3w5\",\n    label: \"BankPic\"\n  })(false ? {\n    name: \"1v1ns7q\",\n    styles: \"grid-column-start:2;grid-column-end:3;gird-row-start:1;grid-row-end:3;display:flex;margin-left:auto;margin-right:25px\"\n  } : {\n    name: \"1v1ns7q\",\n    styles: \"grid-column-start:2;grid-column-end:3;gird-row-start:1;grid-row-end:3;display:flex;margin-left:auto;margin-right:25px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeLabel = _styled(\"div\", {\n    target: \"e11i6h3w4\",\n    label: \"IncomeLabel\"\n  })(false ? {\n    name: \"109gjet\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:1;grid-row-end:2;font-size:13px;color:rgba(0, 0, 0, 0.5)\"\n  } : {\n    name: \"109gjet\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:1;grid-row-end:2;font-size:13px;color:rgba(0, 0, 0, 0.5)\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeSize = _styled(\"div\", {\n    target: \"e11i6h3w3\",\n    label: \"IncomeSize\"\n  })(false ? {\n    name: \"17pl6a5\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:2;grid-row-end:3;display:flex\"\n  } : {\n    name: \"17pl6a5\",\n    styles: \"grid-column-start:1;grid-column-end:2;grid-row-start:2;grid-row-end:3;display:flex\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzRytCIiwiZmlsZSI6Ii9ob21lL2lseWEvd29ya1JlYWN0L2N1cnJlbnRjdXJyZW50UHJvamVjdC9jb21wb25lbnRzL0dyYXBoLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xuaW1wb3J0IHsgTk9OQU1FIH0gZnJvbSBcImRuc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluZSB9IGZyb20gXCJyZWFjdC1jaGFydGpzLTJcIjtcbi8vIGltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZC9tYWNyb1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHcmFwaCgpIHtcbiAgLy8gc3R5bGVzXG4gIGNvbnN0IFtjaGFydERhdGEsIHNldENoYXJ0RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG4gIGNvbnN0IFtjdXJyZW50SW5jb21lLCBzZXRJbmNvbWVdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IGNoYXJ0ID0gKCkgPT4ge1xuICAgIGNvbnN0IGdldFJhbmRvbUludCA9IChtaW4sIG1heCkgPT4ge1xuICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XG4gICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pOyAvL1RoZSBtYXhpbXVtIGlzIGV4Y2x1c2l2ZSBhbmQgdGhlIG1pbmltdW0gaXMgaW5jbHVzaXZlXG4gICAgfTtcbiAgICBjb25zdCBnZW5lcmF0ZVJhbmRvbURhdGEgPSAoKSA9PiB7XG4gICAgICBsZXQgdG9SZXR1cm4gPSBbXTtcbiAgICAgIGxldCBpbmNvbWVTdW0gPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgdG9SZXR1cm4ucHVzaChnZXRSYW5kb21JbnQoMTAwMCwgNjAwMCkpO1xuICAgICAgICBpbmNvbWVTdW0gKz0gdG9SZXR1cm5baV07XG4gICAgICB9XG4gICAgICBzZXRJbmNvbWUoaW5jb21lU3VtKTtcbiAgICAgIHJldHVybiB0b1JldHVybjtcbiAgICB9O1xuICAgIHNldENoYXJ0RGF0YSh7XG4gICAgICBsYWJlbHM6IFtcbiAgICAgICAgXCIyMyDRgdC10L1cIixcbiAgICAgICAgXCIyNCDRgdC10L1cIixcbiAgICAgICAgXCIyNSDRgdC10L1cIixcbiAgICAgICAgXCIyNiDRgdC10L1cIixcbiAgICAgICAgXCIyNyDRgdC10L1cIixcbiAgICAgICAgXCIyOCDRgdC10L1cIixcbiAgICAgICAgXCIyOSDRgdC10L1cIixcbiAgICAgIF0sXG4gICAgICBkYXRhc2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IFwiSW5jb21lXCIsXG4gICAgICAgICAgZGF0YTogZ2VuZXJhdGVSYW5kb21EYXRhKCksXG4gICAgICAgICAgYm9yZGVyQ29sb3I6IFwicmdiYSg0NiwxMTMsMjQzLDEpXCIsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInJnYmEoNDYsMTEzLDI0MywwLjEpXCIsXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgICAgcG9pbnRTdHlsZTogXCJjaXJjbGVcIixcbiAgICAgICAgICBmaWxsOiB0cnVlLFxuICAgICAgICAgIHBvaW50QmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgICAgcG9pbnRCb3JkZXJXaWR0aDogMixcbiAgICAgICAgICBwb2ludFJhZGl1czogNCxcbiAgICAgICAgICBwb2ludEhvdmVyQm9yZGVyQ29sb3I6IFwiI0VEMEY0OFwiLFxuICAgICAgICAgIGhvdmVyQmFja2dyb3VuZENvbG9yOiBcIiNGRkZGRkZcIixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IEdyYXBoQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgICBoZWlnaHQ6IDIwMHB4O1xuICAgIHdpZHRoOiA1NjBweDtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgIHotaW5kZXg6IDA7XG4gIGA7XG4gIGNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHdpZHRoOiA1NzVweDtcbiAgICBoZWlnaHQ6IDMxNXB4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgZm9udC1mYW1pbHk6IFwiSm9zdFwiO1xuICBgO1xuICBjb25zdCBIaWRpbmdCbG9jayA9IHN0eWxlZC5kaXZgXG4gICAgd2lkdGg6IDU2NXB4O1xuICAgIGhlaWdodDogMjI1cHg7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICBtYXJnaW4tdG9wOiAtMzAwcHg7XG4gICAgei1pbmRleDogMTAwO1xuICBgO1xuICBjb25zdCBNYWluQmxvY2sgPSBzdHlsZWQuZGl2YFxuICAgIHdpZHRoOiA2MDBweDtcbiAgYDtcbiAgY29uc3QgSW5mb0NvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XG4gICAgcGFkZGluZy10b3A6IDIwcHg7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG87XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG87XG4gIGA7XG4gIGNvbnN0IEJhbmtQaWMgPSBzdHlsZWQuaW1nYFxuICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAyO1xuICAgIGdyaWQtY29sdW1uLWVuZDogMztcbiAgICBnaXJkLXJvdy1zdGFydDogMTtcbiAgICBncmlkLXJvdy1lbmQ6IDM7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICBtYXJnaW4tcmlnaHQ6IDI1cHg7XG4gIGA7XG4gIGNvbnN0IEluY29tZUxhYmVsID0gc3R5bGVkLmRpdmBcbiAgICBncmlkLWNvbHVtbi1zdGFydDogMTtcbiAgICBncmlkLWNvbHVtbi1lbmQ6IDI7XG4gICAgZ3JpZC1yb3ctc3RhcnQ6IDE7XG4gICAgZ3JpZC1yb3ctZW5kOiAyO1xuICAgIGZvbnQtc2l6ZTogMTNweDtcbiAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICBgO1xuICBjb25zdCBJbmNvbWVTaXplID0gc3R5bGVkLmRpdmBcbiAgICBncmlkLWNvbHVtbi1zdGFydDogMTtcbiAgICBncmlkLWNvbHVtbi1lbmQ6IDI7XG4gICAgZ3JpZC1yb3ctc3RhcnQ6IDI7XG4gICAgZ3JpZC1yb3ctZW5kOiAzO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gIGA7XG4gIGNvbnN0IEluY29tZU51bWJlciA9IHN0eWxlZC5kaXZgXG4gICAgZm9udC1zaXplOiAyNXB4O1xuICBgO1xuICBjb25zdCBSdWIgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDhweDtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgYDtcbiAgY29uc3QgTGl0dGxlUGljID0gc3R5bGVkLmltZ2BcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xuICAgIG1hcmdpbi1sZWZ0OiAzcHg7XG4gICAgaGVpZ2h0OiAyMHB4O1xuICBgO1xuICBjb25zdCBmb3JtYXRJbmNvbWUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGN1cnJlbnRJbmNvbWUudG9TdHJpbmcoKS5zbGljZSgwLCAyKSArXG4gICAgICBcIiBcIiArXG4gICAgICBjdXJyZW50SW5jb21lLnRvU3RyaW5nKCkuc2xpY2UoMiwgY3VycmVudEluY29tZS50b1N0cmluZygpLmxlbmd0aClcbiAgICApO1xuICB9O1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNoYXJ0KCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyPlxuICAgICAgPEluZm9Db250YWluZXI+XG4gICAgICAgIDxJbmNvbWVMYWJlbD7QktGL0YDRg9GH0LrQsDo8L0luY29tZUxhYmVsPlxuICAgICAgICA8SW5jb21lU2l6ZT5cbiAgICAgICAgICA8SW5jb21lTnVtYmVyPntmb3JtYXRJbmNvbWUoKX08L0luY29tZU51bWJlcj5cbiAgICAgICAgICA8UnViPtGA0YPQsTwvUnViPlxuICAgICAgICAgIDxMaXR0bGVQaWMgc3JjPVwiL2xpbEluY3JlYXNlLnBuZ1wiPjwvTGl0dGxlUGljPlxuICAgICAgICA8L0luY29tZVNpemU+XG4gICAgICAgIDxCYW5rUGljIHNyYz1cIi95YUxvZ28ucG5nXCI+PC9CYW5rUGljPlxuICAgICAgPC9JbmZvQ29udGFpbmVyPlxuICAgICAgPEdyYXBoQ29udGFpbmVyPlxuICAgICAgICA8TGluZVxuICAgICAgICAgIGRhdGE9e2NoYXJ0RGF0YX1cbiAgICAgICAgICBvcHRpb25zPXt7XG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXG4gICAgICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24gKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBcItCS0YvRgNGD0YfQutCwINC30LAgXCIgK1xuICAgICAgICAgICAgICAgICAgICBkYXRhW1wibGFiZWxzXCJdW3Rvb2x0aXBJdGVtWzBdW1wiaW5kZXhcIl1dICtcbiAgICAgICAgICAgICAgICAgICAgXCI6XCJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBkYXRhW1wiZGF0YXNldHNcIl1bMF1bXCJkYXRhXCJdW3Rvb2x0aXBJdGVtW1wiaW5kZXhcIl1dICsgXCIg0YDRg9CxXCJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGRkZcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250RmFtaWx5OiBcIkpvc3RcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250U2l6ZTogMTAsXG4gICAgICAgICAgICAgIHRpdGxlRm9udFN0eWxlOiBcIm5vcm1hbFwiLFxuICAgICAgICAgICAgICB0aXRsZUZvbnRDb2xvcjogXCJyZ2JhKDAsMCwwLDAuNClcIixcbiAgICAgICAgICAgICAgdGl0bGVGb250V2lkdGg6IDEwMCxcbiAgICAgICAgICAgICAgYm9keUZvbnRDb2xvcjogXCIjMDAwXCIsXG4gICAgICAgICAgICAgIGJvZHlGb250U2l6ZTogMTIsXG4gICAgICAgICAgICAgIGJvZHlGb250RmFtaWx5OiBcIkpvc3RcIixcbiAgICAgICAgICAgICAgZGlzcGxheUNvbG9yczogZmFsc2UsXG4gICAgICAgICAgICAgIHhQYWRkaW5nOiAxMyxcbiAgICAgICAgICAgICAgeVBhZGRpbmc6IDEzLFxuICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVnZW5kOiB7IGRpc3BsYXk6IGZhbHNlIH0sXG4gICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgeEF4ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkcmF3Qm9yZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJKb3N0XCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkcmF3Qm9yZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgeUF4ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEyLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgdmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID4gNTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAvIDEwMDAgKyBcIiDRgtGL0YEuIOKCvVwiO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbWF4VGlja3NMaW1pdDogMTAsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBTaXplOiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBcIkpvc3RcIixcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBncmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZHJhd0JvcmRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHo6IC0xMDAsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgIDwvTGluZT5cbiAgICAgIDwvR3JhcGhDb250YWluZXI+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59XG4iXX0= */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var IncomeNumber = _styled(\"div\", {\n    target: \"e11i6h3w2\",\n    label: \"IncomeNumber\"\n  })(false ? {\n    name: \"1d5d9s7\",\n    styles: \"font-size:25px\"\n  } : {\n    name: \"1d5d9s7\",\n    styles: \"font-size:25px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var Rub = _styled(\"div\", {\n    target: \"e11i6h3w1\",\n    label: \"Rub\"\n  })(false ? {\n    name: \"vz6do4\",\n    styles: \"margin-top:8px;margin-left:5px;font-size:18px\"\n  } : {\n    name: \"vz6do4\",\n    styles: \"margin-top:8px;margin-left:5px;font-size:18px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var LittlePic = _styled(\"img\", {\n    target: \"e11i6h3w0\",\n    label: \"LittlePic\"\n  })(false ? {\n    name: \"32zmbs\",\n    styles: \"margin-top:12px;margin-left:3px;height:20px\"\n  } : {\n    name: \"32zmbs\",\n    styles: \"margin-top:12px;margin-left:3px;height:20px\",\n    map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n  });\n\n  var formatIncome = function formatIncome() {\n    return currentIncome.toString().slice(0, 2) + \" \" + currentIncome.toString().slice(2, currentIncome.toString().length);\n  };\n\n  useEffect(function () {\n    chart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(InfoContainer, {\n      children: [/*#__PURE__*/_jsxDEV(IncomeLabel, {\n        children: \"\\u0412\\u044B\\u0440\\u0443\\u0447\\u043A\\u0430:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IncomeSize, {\n        children: [/*#__PURE__*/_jsxDEV(IncomeNumber, {\n          children: formatIncome()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rub, {\n          children: \"\\u0440\\u0443\\u0431\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LittlePic, {\n          src: \"/lilIncrease.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BankPic, {\n        src: \"/yaLogo.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GraphContainer, {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          tooltips: {\n            callbacks: {\n              title: function title(tooltipItem, data) {\n                return \"Выручка за \" + data[\"labels\"][tooltipItem[0][\"index\"]] + \":\";\n              },\n              label: function label(tooltipItem, data) {\n                return data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]] + \" руб\";\n              }\n            },\n            backgroundColor: \"#FFF\",\n            titleFontFamily: \"Jost\",\n            titleFontSize: 10,\n            titleFontStyle: \"normal\",\n            titleFontColor: \"rgba(0,0,0,0.4)\",\n            titleFontWidth: 100,\n            bodyFontColor: \"#000\",\n            bodyFontSize: 12,\n            bodyFontFamily: \"Jost\",\n            displayColors: false,\n            xPadding: 13,\n            yPadding: 13,\n            cornerRadius: 0\n          },\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: true,\n                drawBorder: false,\n                fontSize: 12,\n                padding: 10,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: false,\n                drawBorder: false\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true,\n                padding: 10,\n                fontSize: 12,\n                callback: function callback(value, index, values) {\n                  if (value > 5000) {\n                    return \"\";\n                  } else {\n                    return value / 1000 + \" тыс. ₽\";\n                  }\n                },\n                maxTicksLimit: 10,\n                stepSize: 1000,\n                fontFamily: \"Jost\"\n              },\n              gridLines: {\n                display: true,\n                drawBorder: false,\n                z: -100\n              }\n            }]\n          }\n        },\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graph, \"CrqXhFVR8pscb/XfSvZOt4MUOF4=\");\n\n_c = Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/ilya/workReact/currentcurrentProject/components/Graph.tsx"],"names":["useEffect","useState","Line","Graph","chartData","setChartData","currentIncome","setIncome","chart","getRandomInt","min","max","Math","ceil","floor","random","generateRandomData","toReturn","incomeSum","i","push","labels","datasets","label","data","borderColor","backgroundColor","borderWidth","pointStyle","fill","pointBackgroundColor","pointBorderWidth","pointRadius","pointHoverBorderColor","hoverBackgroundColor","GraphContainer","Container","HidingBlock","MainBlock","InfoContainer","BankPic","IncomeLabel","IncomeSize","IncomeNumber","Rub","LittlePic","formatIncome","toString","slice","length","responsive","maintainAspectRatio","tooltips","callbacks","title","tooltipItem","titleFontFamily","titleFontSize","titleFontStyle","titleFontColor","titleFontWidth","bodyFontColor","bodyFontSize","bodyFontFamily","displayColors","xPadding","yPadding","cornerRadius","legend","display","scales","xAxes","ticks","drawBorder","fontSize","padding","fontFamily","gridLines","yAxes","callback","value","index","values","maxTicksLimit","stepSize","z"],"mappings":"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","sourcesContent":["import styled from \"@emotion/styled\";\nimport { NONAME } from \"dns\";\nimport { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n// import styled from \"@emotion/styled/macro\";\n\nexport default function Graph() {\n  // styles\n  const [chartData, setChartData] = useState({});\n  const [currentIncome, setIncome] = useState(0);\n  const chart = () => {\n    const getRandomInt = (min, max) => {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n    };\n    const generateRandomData = () => {\n      let toReturn = [];\n      let incomeSum = 0;\n      for (let i = 0; i < 7; i++) {\n        toReturn.push(getRandomInt(1000, 6000));\n        incomeSum += toReturn[i];\n      }\n      setIncome(incomeSum);\n      return toReturn;\n    };\n    setChartData({\n      labels: [\n        \"23 сен\",\n        \"24 сен\",\n        \"25 сен\",\n        \"26 сен\",\n        \"27 сен\",\n        \"28 сен\",\n        \"29 сен\",\n      ],\n      datasets: [\n        {\n          label: \"Income\",\n          data: generateRandomData(),\n          borderColor: \"rgba(46,113,243,1)\",\n          backgroundColor: \"rgba(46,113,243,0.1)\",\n          borderWidth: 2,\n          pointStyle: \"circle\",\n          fill: true,\n          pointBackgroundColor: \"white\",\n          pointBorderWidth: 2,\n          pointRadius: 4,\n          pointHoverBorderColor: \"#ED0F48\",\n          hoverBackgroundColor: \"#FFFFFF\",\n        },\n      ],\n    });\n  };\n  const GraphContainer = styled.div`\n    height: 200px;\n    width: 560px;\n    background: #fff;\n    z-index: 0;\n  `;\n  const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 575px;\n    height: 315px;\n    background: #fff;\n    font-family: \"Jost\";\n  `;\n  const HidingBlock = styled.div`\n    width: 565px;\n    height: 225px;\n    background: #fff;\n    margin-top: -300px;\n    z-index: 100;\n  `;\n  const MainBlock = styled.div`\n    width: 600px;\n  `;\n  const InfoContainer = styled.div`\n    display: grid;\n    padding-left: 20px;\n    padding-top: 20px;\n    grid-template-columns: auto auto;\n    grid-template-rows: auto auto;\n  `;\n  const BankPic = styled.img`\n    grid-column-start: 2;\n    grid-column-end: 3;\n    gird-row-start: 1;\n    grid-row-end: 3;\n    display: flex;\n    margin-left: auto;\n    margin-right: 25px;\n  `;\n  const IncomeLabel = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 1;\n    grid-row-end: 2;\n    font-size: 13px;\n    color: rgba(0, 0, 0, 0.5);\n  `;\n  const IncomeSize = styled.div`\n    grid-column-start: 1;\n    grid-column-end: 2;\n    grid-row-start: 2;\n    grid-row-end: 3;\n    display: flex;\n  `;\n  const IncomeNumber = styled.div`\n    font-size: 25px;\n  `;\n  const Rub = styled.div`\n    margin-top: 8px;\n    margin-left: 5px;\n    font-size: 18px;\n  `;\n  const LittlePic = styled.img`\n    margin-top: 12px;\n    margin-left: 3px;\n    height: 20px;\n  `;\n  const formatIncome = () => {\n    return (\n      currentIncome.toString().slice(0, 2) +\n      \" \" +\n      currentIncome.toString().slice(2, currentIncome.toString().length)\n    );\n  };\n  useEffect(() => {\n    chart();\n  }, []);\n  return (\n    <Container>\n      <InfoContainer>\n        <IncomeLabel>Выручка:</IncomeLabel>\n        <IncomeSize>\n          <IncomeNumber>{formatIncome()}</IncomeNumber>\n          <Rub>руб</Rub>\n          <LittlePic src=\"/lilIncrease.png\"></LittlePic>\n        </IncomeSize>\n        <BankPic src=\"/yaLogo.png\"></BankPic>\n      </InfoContainer>\n      <GraphContainer>\n        <Line\n          data={chartData}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            tooltips: {\n              callbacks: {\n                title: function (tooltipItem, data) {\n                  return (\n                    \"Выручка за \" +\n                    data[\"labels\"][tooltipItem[0][\"index\"]] +\n                    \":\"\n                  );\n                },\n                label: function (tooltipItem, data) {\n                  return (\n                    data[\"datasets\"][0][\"data\"][tooltipItem[\"index\"]] + \" руб\"\n                  );\n                },\n              },\n              backgroundColor: \"#FFF\",\n              titleFontFamily: \"Jost\",\n              titleFontSize: 10,\n              titleFontStyle: \"normal\",\n              titleFontColor: \"rgba(0,0,0,0.4)\",\n              titleFontWidth: 100,\n              bodyFontColor: \"#000\",\n              bodyFontSize: 12,\n              bodyFontFamily: \"Jost\",\n              displayColors: false,\n              xPadding: 13,\n              yPadding: 13,\n              cornerRadius: 0,\n            },\n            legend: { display: false },\n            scales: {\n              xAxes: [\n                {\n                  ticks: {\n                    display: true,\n                    drawBorder: false,\n                    fontSize: 12,\n                    padding: 10,\n                    fontFamily: \"Jost\",\n                  },\n                  gridLines: {\n                    display: false,\n                    drawBorder: false,\n                  },\n                },\n              ],\n              yAxes: [\n                {\n                  ticks: {\n                    display: true,\n                    padding: 10,\n                    fontSize: 12,\n                    callback: function (value, index, values) {\n                      if (value > 5000) {\n                        return \"\";\n                      } else {\n                        return value / 1000 + \" тыс. ₽\";\n                      }\n                    },\n                    maxTicksLimit: 10,\n                    stepSize: 1000,\n                    fontFamily: \"Jost\",\n                  },\n                  gridLines: {\n                    display: true,\n                    drawBorder: false,\n                    z: -100,\n                  },\n                },\n              ],\n            },\n          }}\n        >\n          {\" \"}\n        </Line>\n      </GraphContainer>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}